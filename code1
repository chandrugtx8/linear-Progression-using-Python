import pandas as pd
import numpy as np  
import matplotlib.pyplot as plt  

# Reading data from remote link
url = "http://bit.ly/w-data"
s= pd.read_csv(url)
print("Data imported successfully")

s.head(10)


# Plotting the distribution of scores
s.plot(x='Hours', y='Scores', style='o')  
plt.title('Hours vs Percentage')  
plt.xlabel('Hours Studied')  
plt.ylabel('Percentage Score')  
plt.show()
s.plot(kind='box')
plt.show()


x= s.iloc[:, :-1].values  
y= s.iloc[:, 1].values  


from sklearn.model_selection import train_test_split  
x_train, x_test, y_train, y_test = train_test_split(x, y, 
                            test_size=0.2, random_state=0) 

from sklearn.linear_model import LinearRegression  
r = LinearRegression()  
r.fit(x_train, y_train) 


# Plotting the regression line
line = r.coef_*x+r.intercept_

# Plotting for the test data
plt.scatter(x, y)
plt.plot(x, line);
plt.show()


print(x_test) # Testing data - In Hours
y_pred = r.predict(x_test) # Predicting the scores

# Comparing Actual vs Predicted
df = pd.DataFrame({'Actual': y_test, 'Predicted': y_pred})  
df 

print('Testing scores:',r.score(x_test,y_test))
print('Training scores:',r.score(x_train,y_train))

df.plot(kind='bar')
plt.show()

# You can also test with your own data

g=float(input("enter the number"))
f=np.array([g])
h=f.reshape(-1,1)
own_pred = r.predict(h)
print("No of Hours = {}".format(g))
print("Predicted Score = {}".format(own_pred[0]))

from sklearn import metrics  
print('Mean Absolute Error:', 
      metrics.mean_absolute_error(y_test, y_pred))
      
from sklearn.metrics import r2_score
print('The R-Square of the model is:',r2_score(y_test,y_pred))    
      
      
      
      
